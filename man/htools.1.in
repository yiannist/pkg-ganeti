.TH HTOOLS 1 "" "Ganeti" "Version @GANETI_VERSION@"
.SH NAME
.PP
htools - Cluster allocation and placement tools for Ganeti
.SH SYNOPSIS
.TP
.B \f[B]hbal\f[]
cluster balancer
.RS
.RE
.TP
.B \f[B]hcheck\f[]
cluster checker
.RS
.RE
.TP
.B \f[B]hspace\f[]
cluster capacity computation
.RS
.RE
.TP
.B \f[B]hail\f[]
IAllocator plugin
.RS
.RE
.TP
.B \f[B]hscan\f[]
saves cluster state for later reuse
.RS
.RE
.TP
.B \f[B]hinfo\f[]
cluster information printer
.RS
.RE
.TP
.B \f[B]hroller\f[]
cluster rolling maintenance scheduler
.RS
.RE
.SH DESCRIPTION
.PP
\f[C]htools\f[] is a suite of tools designed to help with
allocation/movement of instances and balancing of Ganeti clusters.
\f[C]htools\f[] is also the generic binary that must be symlinked or
hardlinked under each tool\[aq]s name in order to perform the different
functions.
Alternatively, the environment variable HTOOLS can be used to set the
desired role.
.PP
Installed as \f[C]hbal\f[], it computes and optionally executes a suite
of instance moves in order to balance the cluster.
.PP
Installed as \f[C]hcheck\f[], it preforms cluster checks and optionally
simulates rebalancing with all the \f[C]hbal\f[] options available.
.PP
Installed as \f[C]hspace\f[], it computes how many additional instances
can be fit on a cluster, while maintaining N+1 status.
It can run on models of existing clusters or of simulated clusters.
.PP
Installed as \f[C]hail\f[], it acts as an IAllocator plugin, i.e.
it is used by Ganeti to compute new instance allocations and instance
moves.
.PP
Installed as \f[C]hscan\f[], it scans the local or remote cluster state
and saves it to files which can later be reused by the other roles.
.PP
Installed as \f[C]hinfo\f[], it prints information about the current
cluster state.
.PP
Installed as \f[C]hroller\f[], it helps scheduling maintenances that
require node reboots on a cluster.
.SH COMMON OPTIONS
.PP
Options behave the same in all program modes, but not all program modes
support all options.
Some common options are:
.TP
.B -p, --print-nodes
Prints the node status, in a format designed to allow the user to
understand the node\[aq]s most important parameters.
If the command in question makes a cluster transition (e.g.
balancing or allocation), then usually both the initial and final node
status is printed.
.RS
.PP
It is possible to customise the listed information by passing a
comma-separated list of field names to this option (the field list is
currently undocumented), or to extend the default field list by
prefixing the additional field list with a plus sign.
By default, the node list will contain the following information:
.TP
.B F
a character denoting the status of the node, with \[aq]-\[aq] meaning an
offline node, \[aq]*\[aq] meaning N+1 failure and blank meaning a good
node
.RS
.RE
.TP
.B Name
the node name
.RS
.RE
.TP
.B t_mem
the total node memory
.RS
.RE
.TP
.B n_mem
the memory used by the node itself
.RS
.RE
.TP
.B i_mem
the memory used by instances
.RS
.RE
.TP
.B x_mem
amount memory which seems to be in use but cannot be determined why or
by which instance; usually this means that the hypervisor has some
overhead or that there are other reporting errors
.RS
.RE
.TP
.B f_mem
the free node memory
.RS
.RE
.TP
.B r_mem
the reserved node memory, which is the amount of free memory needed for
N+1 compliance
.RS
.RE
.TP
.B t_dsk
total disk
.RS
.RE
.TP
.B f_dsk
free disk
.RS
.RE
.TP
.B pcpu
the number of physical cpus on the node
.RS
.RE
.TP
.B vcpu
the number of virtual cpus allocated to primary instances
.RS
.RE
.TP
.B pcnt
number of primary instances
.RS
.RE
.TP
.B scnt
number of secondary instances
.RS
.RE
.TP
.B p_fmem
percent of free memory
.RS
.RE
.TP
.B p_fdsk
percent of free disk
.RS
.RE
.TP
.B r_cpu
ratio of virtual to physical cpus
.RS
.RE
.TP
.B lCpu
the dynamic CPU load (if the information is available)
.RS
.RE
.TP
.B lMem
the dynamic memory load (if the information is available)
.RS
.RE
.TP
.B lDsk
the dynamic disk load (if the information is available)
.RS
.RE
.TP
.B lNet
the dynamic net load (if the information is available)
.RS
.RE
.RE
.TP
.B -t \f[I]datafile\f[], --text-data=\f[I]datafile\f[]
Backend specification: the name of the file holding node and instance
information (if not collecting via RAPI or LUXI).
This or one of the other backends must be selected.
The option is described in the man page \f[B]htools\f[](1).
.RS
.PP
The file should contain text data, line-based, with single empty lines
separating sections.
The lines themselves are column-based, with the pipe symbol (\f[C]|\f[])
acting as separator.
.PP
The first section contains group data, with the following columns:
.IP \[bu] 2
group name
.IP \[bu] 2
group uuid
.IP \[bu] 2
allocation policy
.IP \[bu] 2
tags (separated by comma)
.IP \[bu] 2
networks (UUID\[aq]s, separated by comma)
.PP
The second sections contains node data, with the following columns:
.IP \[bu] 2
node name
.IP \[bu] 2
node total memory
.IP \[bu] 2
memory used by the node
.IP \[bu] 2
node free memory
.IP \[bu] 2
node total disk
.IP \[bu] 2
node free disk
.IP \[bu] 2
node physical cores
.IP \[bu] 2
offline/role field (\f[C]Y\f[] for offline nodes, \f[C]N\f[] for online
non-master nodes, and \f[C]M\f[] for the master node which is always
online)
.IP \[bu] 2
group UUID
.IP \[bu] 2
node spindle count
.IP \[bu] 2
node tags
.IP \[bu] 2
exclusive storage value (\f[C]Y\f[] if active, \f[C]N\f[] otherwise)
.IP \[bu] 2
node free spindles
.IP \[bu] 2
virtual CPUs used by the node OS
.PP
The third section contains instance data, with the fields:
.IP \[bu] 2
instance name
.IP \[bu] 2
instance memory
.IP \[bu] 2
instance disk size
.IP \[bu] 2
instance vcpus
.IP \[bu] 2
instance status (in Ganeti\[aq]s format, e.g.
\f[C]running\f[] or \f[C]ERROR_down\f[])
.IP \[bu] 2
instance \f[C]auto_balance\f[] flag (see man page
\f[B]gnt-instance\f[](8))
.IP \[bu] 2
instance primary node
.IP \[bu] 2
instance secondary node(s), if any
.IP \[bu] 2
instance disk type (e.g.
\f[C]plain\f[] or \f[C]drbd\f[])
.IP \[bu] 2
instance tags
.IP \[bu] 2
spindle use back-end parameter
.IP \[bu] 2
actual disk spindles used by the instance (it can be \f[C]-\f[] when
exclusive storage is not active)
.PP
The fourth section contains the cluster tags, with one tag per line (no
columns/no column processing).
.PP
The fifth section contains the ipolicies of the cluster and the node
groups, in the following format (separated by \f[C]|\f[]):
.IP \[bu] 2
owner (empty if cluster, group name otherwise)
.IP \[bu] 2
standard, min, max instance specs; min and max instance specs are
separated between them by a semicolon, and can be specified multiple
times (min;max;min;max...)
; each of the specs contains the following values separated by commas:
.RS 2
.IP \[bu] 2
memory size
.IP \[bu] 2
cpu count
.IP \[bu] 2
disk size
.IP \[bu] 2
disk count
- NIC count
.RE
.IP \[bu] 2
disk templates
.IP \[bu] 2
vcpu ratio
.IP \[bu] 2
spindle ratio
.RE
.TP
.B --mond
If given the program will query all MonDs to fetch data from the
supported data collectors over the network.
.RS
.RE
.TP
.B --mond-data \f[I]datafile\f[]
The name of the file holding the data provided by MonD, to override
quering MonDs over the network.
This is mostly used for debugging.
The file must be in JSON format and present an array of JSON objects ,
one for every node, with two members.
The first member named \f[C]node\f[] is the name of the node and the
second member named \f[C]reports\f[] is an array of report objects.
The report objects must be in the same format as produced by the
monitoring agent.
.RS
.RE
.TP
.B --ignore-dynu
If given, all dynamic utilisation information will be ignored by
assuming it to be 0.
This option will take precedence over any data passed by the \f[C]-U\f[]
option (available with hbal) or by the MonDs with the \f[C]--mond\f[]
and the \f[C]--mond-data\f[] option.
.RS
.RE
.TP
.B -m \f[I]cluster\f[]
Backend specification: collect data directly from the \f[I]cluster\f[]
given as an argument via RAPI.
If the argument doesn\[aq]t contain a colon (:), then it is converted
into a fully-built URL via prepending \f[C]https://\f[] and appending
the default RAPI port, otherwise it is considered a fully-specified URL
and used as-is.
.RS
.RE
.TP
.B -L [\f[I]path\f[]]
Backend specification: collect data directly from the master daemon,
which is to be contacted via LUXI (an internal Ganeti protocol).
An optional \f[I]path\f[] argument is interpreted as the path to the
unix socket on which the master daemon listens; otherwise, the default
path used by Ganeti (configured at build time) is used.
.RS
.RE
.TP
.B -I|--ialloc-src \f[I]path\f[]
Backend specification: load data directly from an iallocator request (as
produced by Ganeti when doing an iallocator call).
The iallocator request is read from specified path.
.RS
.RE
.TP
.B --simulate \f[I]description\f[]
Backend specification: instead of using actual data, build an empty
cluster given a node description.
The \f[I]description\f[] parameter must be a comma-separated list of
five elements, describing in order:
.RS
.IP \[bu] 2
the allocation policy for this node group (\f[I]preferred\f[],
\f[I]allocable\f[] or \f[I]unallocable\f[], or alternatively the short
forms \f[I]p\f[], \f[I]a\f[] or \f[I]u\f[])
.IP \[bu] 2
the number of nodes in the cluster
.IP \[bu] 2
the disk size of the nodes (default in mebibytes, units can be used)
.IP \[bu] 2
the memory size of the nodes (default in mebibytes, units can be used)
.IP \[bu] 2
the cpu core count for the nodes
.IP \[bu] 2
the spindle count for the nodes
.PP
An example description would be \f[B]preferred,20,100G,16g,4,2\f[]
describing a 20-node cluster where each node has 100GB of disk space,
16GiB of memory, 4 CPU cores and 2 disk spindles.
Note that all nodes must have the same specs currently.
.PP
This option can be given multiple times, and each new use defines a new
node group.
Hence different node groups can have different allocation policies and
node count/specifications.
.RE
.TP
.B -v, --verbose
Increase the output verbosity.
Each usage of this option will increase the verbosity (currently more
than 2 doesn\[aq]t make sense) from the default of one.
.RS
.RE
.TP
.B -q, --quiet
Decrease the output verbosity.
Each usage of this option will decrease the verbosity (less than zero
doesn\[aq]t make sense) from the default of one.
.RS
.RE
.TP
.B -V, --version
Just show the program version and exit.
.RS
.RE
.SS UNITS
.PP
Some options accept not simply numerical values, but numerical values
together with a unit.
By default, such unit-accepting options use mebibytes.
Using the lower-case letters of \f[I]m\f[], \f[I]g\f[] and \f[I]t\f[]
(or their longer equivalents of \f[I]mib\f[], \f[I]gib\f[],
\f[I]tib\f[], for which case doesn\[aq]t matter) explicit binary units
can be selected.
Units in the SI system can be selected using the upper-case letters of
\f[I]M\f[], \f[I]G\f[] and \f[I]T\f[] (or their longer equivalents of
\f[I]MB\f[], \f[I]GB\f[], \f[I]TB\f[], for which case doesn\[aq]t
matter).
.PP
More details about the difference between the SI and binary systems can
be read in the \f[B]units\f[](7) man page.
.SH ENVIRONMENT
.PP
The environment variable \f[C]HTOOLS\f[] can be used instead of
renaming/symlinking the programs; simply set it to the desired role and
then the name of the program is no longer used.
.SH REPORTING BUGS
.PP
Report bugs to project website (http://code.google.com/p/ganeti/) or
contact the developers using the Ganeti mailing
list (ganeti@googlegroups.com).
.SH SEE ALSO
.PP
Ganeti overview and specifications: \f[B]ganeti\f[](7) (general
overview), \f[B]ganeti-os-interface\f[](7) (guest OS definitions),
\f[B]ganeti-extstorage-interface\f[](7) (external storage providers).
.PP
Ganeti commands: \f[B]gnt-cluster\f[](8) (cluster-wide commands),
\f[B]gnt-job\f[](8) (job-related commands), \f[B]gnt-node\f[](8)
(node-related commands), \f[B]gnt-instance\f[](8) (instance commands),
\f[B]gnt-os\f[](8) (guest OS commands), \f[B]gnt-storage\f[](8) (storage
commands), \f[B]gnt-group\f[](8) (node group commands),
\f[B]gnt-backup\f[](8) (instance import/export commands),
\f[B]gnt-debug\f[](8) (debug commands).
.PP
Ganeti daemons: \f[B]ganeti-watcher\f[](8) (automatic instance
restarter), \f[B]ganeti-cleaner\f[](8) (job queue cleaner),
\f[B]ganeti-noded\f[](8) (node daemon), \f[B]ganeti-masterd\f[](8)
(master daemon), \f[B]ganeti-rapi\f[](8) (remote API daemon).
.PP
Ganeti htools: \f[B]htools\f[](1) (generic binary), \f[B]hbal\f[](1)
(cluster balancer), \f[B]hspace\f[](1) (capacity calculation),
\f[B]hail\f[](1) (IAllocator plugin), \f[B]hscan\f[](1) (data gatherer
from remote clusters), \f[B]hinfo\f[](1) (cluster information printer),
\f[B]mon-collector\f[](7) (data collectors interface).
.SH COPYRIGHT
.PP
Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011, 2012 Google Inc.
Permission is granted to copy, distribute and/or modify under the terms
of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any
later version.
.PP
On Debian systems, the complete text of the GNU General Public License
can be found in /usr/share/common-licenses/GPL.
